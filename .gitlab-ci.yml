###############################################################
# Execute pipeline for every merge request and after every
# merge request approved for develop and master
###############################################################
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /^WIP:/i || $CI_MERGE_REQUEST_TITLE =~ /^Draft:/i
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'develop' || $CI_COMMIT_BRANCH == 'release/python3'

stages:
  - test
  - deploy

#################################################################################
# Code to be reused in test stage jobs, but is not necessary in the pages job
#################################################################################
.variables_template: &variables_definition
  POSTGRES_USER: 'hubble'
  POSTGRES_PASSWORD: 'hubble'
  APT_CACHE_DIR: '$CI_PROJECT_DIR/build-cache/apt'
  PIP_CACHE_DIR: '$CI_PROJECT_DIR/build-cache/pip'
  PIP_FIND_LINKS: 'https://www.djangoplicity.org/repository/packages/'
  REQUIRED_FOLDERS: 'static docs/static logs tmp import shared'
  REQUIRED_APT_DEPS: 'gcc git libldap2-dev libsasl2-dev libssl-dev python-dev cssmin node-uglify'
  DJANGO_SETTINGS_MODULE: 'spacetelescope.settings.test'

.before_script_template: &before_script_definition
  - echo $REQUIRED_FOLDERS $APT_CACHE_DIR $PIP_CACHE_DIR | xargs mkdir -pv
  - /bin/cp -rf test-utils/media/* docs/static
  - ln -s /root/.local .local
  - apt-get update -y

.build_script_template: &build_script_definition |
  export PATH=/root/.local/bin:$PATH
  apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y $REQUIRED_APT_DEPS
  python -m pip install --upgrade pip
  pip install --user -r requirements.txt
  pip install --user -r test-requirements.txt
  pip --no-cache-dir install --user -r private-requirements.txt
  python manage.py collectstatic --noinput

.test_and_report_template: &test_and_report_definition |
  coverage run manage.py test --noinput
  coverage report
  coverage html

########################################
# Build project and execute tests
########################################
test:py27-django111:
  variables:
    <<: *variables_definition
  cache:
    key: py27-django111
    paths:
      - build-cache
  services:
    - name: postgres:10.5
      alias: webb-db
  stage: test
  image: python:2.7-slim-buster
  before_script: *before_script_definition
  script:
    - *build_script_definition
    - python manage.py makemigrations payment app_plugins django_mailman tieredweight
    - *test_and_report_definition
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master' || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
    - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'develop'
  artifacts:
    when: on_success
    paths:
      - htmlcov
    # As only develop will be available currently in gitlab pages, we can access other reports from pipeline artifacts
    # section for 1000 years
    expire_in: 1000 yrs


test:py38-django111:
  variables:
    <<: *variables_definition
  cache:
    key: py38-django111
    paths:
      - build-cache
  services:
    - name: postgres:10.5
      alias: webb-db
  stage: test
  image: python:3.8
  before_script: *before_script_definition
  script:
    - *build_script_definition
    - *test_and_report_definition
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'release/python3'
    - if: $CI_COMMIT_BRANCH == 'release/python3'
  artifacts:
    when: on_success
    paths:
      - htmlcov
    # As only develop will be available currently in gitlab pages, we can access other reports from pipeline artifacts
    # section for 1000 years
    expire_in: 1000 yrs

##############################################
# Upload coverage reports to pages section
##############################################
pages:
  stage: deploy
  dependencies:
    - test:py27-django111
  allow_failure: true
  script:
    # Delete everything in the current public/{BRANCH_SLUG} folder
    # and replace it with code coverage HTML report
    - rm -rf public/${CI_COMMIT_REF_SLUG}/*
    - mkdir -pv public/${CI_COMMIT_REF_SLUG}/
    - cp -r htmlcov/* public/${CI_COMMIT_REF_SLUG}/
  artifacts:
    paths:
      - public/${CI_COMMIT_REF_SLUG}
    expire_in: 1000 yrs
  # Temporal workaround to avoid gitlab pages content to be overwritten
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

##############################################
# Deploy to dev server
##############################################
devserver:
  stage: deploy
  dependencies:
    - test:py38-django111
  before_script:
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ## Load known host from variable
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@167.172.101.24 'cd esahubble && git pull origin release/python3 && docker-compose -f docker-compose.yml -f docker-compose.devserver.yml up --build -d'
  rules:
    - if: $CI_COMMIT_BRANCH == 'release/python3'
